# Calculate agreement rate
agr_rate <- mean(de_us$DE == de_us$US)
agr_rate
#filtering data from 1990 removind missed ones
de_us <- un %>%
filter(date >= '1990-01-01', !is.na(vote) & !is.na(country)) %>%
# it is important to note that before 03 October 1990 the official name of Federal Republic of Germany was used
mutate(country_code = ifelse(country == "Federal Republic of Germany", "DE", country_code)) %>%
filter(country %in% c("Germany", "Federal Republic of Germany", "United States"))
# Pivot and summarize
de_us <- de_us %>%
select(rcid, country_code, vote) %>%
pivot_wider(names_from = country_code, values_from = vote) %>%
group_by(rcid) %>%
summarize_all(~ mean(.x, na.rm = TRUE))
# Calculate agreement rate
agr_rate <- mean(de_us$DE == de_us$US)
agr_rate
# Pivot and summarize
de_us2 <- de_us2 %>%
select(rcid, country_code, vote) %>%
pivot_wider(names_from = country_code, values_from = vote) %>%
group_by(rcid) %>%
summarize_all(~ mean(.x, na.rm = TRUE))
de_us
# Pivot and summarize
de_us2 <- de_us %>%
select(rcid, country_code, vote) %>%
pivot_wider(names_from = country_code, values_from = vote) %>%
group_by(rcid) %>%
summarize_all(~ mean(.x, na.rm = TRUE))
library(unvotes)
library(tibble)
library(tidyverse)
library(dplyr)
library(eeptools)
library(tidyr)
# combining 'un_roll_calls' dataset and 'un_votes' dataset
un <- full_join(un_roll_calls, un_votes, by = "rcid", relationship = "many-to-many")
#filtering data from 1990 removind missed ones
de_us <- un %>%
filter(date >= '1990-01-01', !is.na(vote) & !is.na(country)) %>%
# it is important to note that before 03 October 1990 the official name of Federal Republic of Germany was used
mutate(country_code = ifelse(country == "Federal Republic of Germany", "DE", country_code)) %>%
filter(country %in% c("Germany", "Federal Republic of Germany", "United States"))
de_us
#filtering data from 1990 removind missed ones
de_us <- un %>%
filter(date >= '1990-01-01', !is.na(vote) & !is.na(country)) %>%
# it is important to note that before 03 October 1990 the official name of Federal Republic of Germany was used
mutate(country_code = ifelse(country == "Federal Republic of Germany", "DE", country_code)) %>%
filter(country %in% c("Germany", "Federal Republic of Germany", "United States")) %>%
select(rcid, country_code, vote)
de_us
#filtering data from 1990 removind missed ones
de_us <- un %>%
filter(date >= '1990-01-01', !is.na(vote) & !is.na(country)) %>%
# it is important to note that before 03 October 1990 the official name of Federal Republic of Germany was used
mutate(country_code = ifelse(country == "Federal Republic of Germany", "DE", country_code)) %>%
filter(country %in% c("Germany", "Federal Republic of Germany", "United States")) %>%
select(rcid, country_code, vote) %>%
pivot_wider(names_from = country_code, values_from = vote)
de_us
sum(is.na(de_us$DE))
sum(is.na(de_us$US))
#filtering data from 1990 removind missed ones
de_us <- un %>%
filter(date >= '1990-01-01', !is.na(vote) & !is.na(country)) %>%
# it is important to note that before 03 October 1990 the official name of Federal Republic of Germany was used
mutate(country_code = ifelse(country == "Federal Republic of Germany", "DE", country_code)) %>%
filter(country %in% c("Germany", "Federal Republic of Germany", "United States")) %>%
select(rcid, country_code, vote) %>%
pivot_wider(names_from = country_code, values_from = vote) %>%
drop_na(de_us$US)
#filtering data from 1990 removind missed ones
de_us <- un %>%
filter(date >= '1990-01-01', !is.na(vote) & !is.na(country)) %>%
# it is important to note that before 03 October 1990 the official name of Federal Republic of Germany was used
mutate(country_code = ifelse(country == "Federal Republic of Germany", "DE", country_code)) %>%
filter(country %in% c("Germany", "Federal Republic of Germany", "United States")) %>%
select(rcid, country_code, vote) %>%
pivot_wider(names_from = country_code, values_from = vote) %>%
summarize_all(~ mean(.x, na.rm = TRUE))
de_us
#filtering data from 1990 removind missed ones
de_us <- un %>%
filter(date >= '1990-01-01', !is.na(vote) & !is.na(country)) %>%
# it is important to note that before 03 October 1990 the official name of Federal Republic of Germany was used
mutate(country_code = ifelse(country == "Federal Republic of Germany", "DE", country_code)) %>%
filter(country %in% c("Germany", "Federal Republic of Germany", "United States")) %>%
select(rcid, country_code, vote) %>%
pivot_wider(names_from = country_code, values_from = vote)
de_us <- drop_na(de_us$US)
#filtering data from 1990 removind missed ones
de_us <- un %>%
filter(date >= '1990-01-01', !is.na(vote) & !is.na(country)) %>%
# it is important to note that before 03 October 1990 the official name of Federal Republic of Germany was used
mutate(country_code = ifelse(country == "Federal Republic of Germany", "DE", country_code)) %>%
filter(country %in% c("Germany", "Federal Republic of Germany", "United States")) %>%
select(rcid, country_code, vote) %>%
pivot_wider(names_from = country_code, values_from = vote) %>%
drop_na()
de_us
sum(is.na(de_us$DE))
sum(is.na(de_us$US))
agr_rate <- mean(de_us$DE == de_us$US)
agr_rate
# combining 'un_roll_calls' dataset and 'un_votes' dataset
un <- full_join(un_roll_calls, un_votes, by = "rcid", relationship = "many-to-many")
# creating specific dataframe only for US and Germany data, filtering data from 1990 removing missed ones
de_us <- un %>%
filter(date >= '1990-01-01', !is.na(vote) & !is.na(country)) %>%
# it is important to note that before 03 October 1990 (date of unification of Germany), the name of Federal Republic of Germany was used,
# accordingly for purposes of this task, name of 'Federal Republic of Germany' shall be also used
mutate(country_code = ifelse(country == "Federal Republic of Germany", "DE", country_code)) %>%
filter(country %in% c("Germany", "Federal Republic of Germany", "United States")) %>%
#removing redundant objects, remaining only rcid, country_code and vote
select(rcid, country_code, vote) %>%
#creating object for US and DE votes
pivot_wider(names_from = country_code, values_from = vote) %>%
#removing missed values
drop_na()
#calculating average
agr_rate <- mean(de_us$DE == de_us$US)
cat("On average, Germany agreed with the US in", round(agr_rate*100, 2), "%", sep = "")
cat("On average, from 1990 Germany agreed with the US in ", round(agr_rate*100, 2), "%", sep = "")
}
votes_agreement_calculator <- function(code=c('DE','US'),year_min=1990){
un <- full_join(un_roll_calls, un_votes, by = "rcid", relationship = "many-to-many") %>%
select(rcid, date, country_code, vote) %>%
filter(!is.na(vote) & !is.na(country_code)) %>%
filter(date >= paste(year_min,'-01-01',sep = ""))
if (un$country_code %>% unique() %in% code %>% sum() <=1){
return("No such country code in the database")
}
else {un_members <- un %>% filter(country_code %in% code) %>%
pivot_wider(names_from = country_code, values_from = vote) %>%
drop_na()
agr_rate <- mean(de_us$DE == de_us$US)
round(agr_rate*100,2)}
}
votes_agreement_calculator(code=c('US','DE'),year_min = 1990)
votes_agreement_calculator(code=c('RU','US'),year_min = 2000)
votes_agreement_calculator(code=c('RU','US'),year_min = 2005)
votes_agreement_calculator <- function(code=c('DE','US'),year_min=1990){
un <- full_join(un_roll_calls, un_votes, by = "rcid", relationship = "many-to-many") %>%
select(rcid, date, country_code, vote) %>%
filter(!is.na(vote) & !is.na(country_code)) %>%
filter(date >= paste(year_min,'-01-01',sep = ""))
if (un$country_code %>% unique() %in% code %>% sum() <=1){
return("No such country code in the database")
}
else {un_members <- un %>% filter(country_code %in% code) %>%
pivot_wider(names_from = country_code, values_from = vote) %>%
drop_na()
agr_rate <- mean(.x$vote[1]==.x$vote[2])
round(agr_rate*100,2)}
}
votes_agreement_calculator(code=c('US','DE'),year_min = 1990)
votes_agreement_calculator <- function(code=c('DE','US'),year_min=1990){
un <- full_join(un_roll_calls, un_votes, by = "rcid", relationship = "many-to-many") %>%
select(rcid, date, country_code, vote) %>%
filter(!is.na(vote) & !is.na(country_code)) %>%
filter(date >= paste(year_min,'-01-01',sep = ""))
if (un$country_code %>% unique() %in% code %>% sum() <=1){
return("No such country code in the database")
}
else {un_members <- un %>% filter(country_code %in% code) %>%
pivot_wider(names_from = country_code, values_from = vote) %>%
drop_na()
agr_rate <- mean(un$vote[1]==un$vote[2])
round(agr_rate*100,2)}
}
votes_agreement_calculator(code=c('US','DE'),year_min = 1990)
votes_agreement_calculator(code=c('RU','US'),year_min = 2005)
votes_agreement_calculator <- function(code=c('DE','US'),year_min=1990){
un <- full_join(un_roll_calls, un_votes, by = "rcid", relationship = "many-to-many") %>%
select(rcid, date, country_code, vote) %>%
filter(!is.na(vote) & !is.na(country_code)) %>%
filter(date >= paste(year_min,'-01-01',sep = ""))
if (un$country_code %>% unique() %in% code %>% sum() <=1){
return("No such country code in the database")
}
else {un_members <- un %>% filter(country_code %in% code) %>%
pivot_wider(names_from = country_code, values_from = vote) %>%
drop_na()
agr_rate <- mean(un_members$country_code[1]==un$country_code[2])
round(agr_rate*100,2)}
}
votes_agreement_calculator(code=c('US','DE'),year_min = 1990)
votes_agreement_calculator <- function(code=c('DE','US'),year_min=1990){
un <- full_join(un_roll_calls, un_votes, by = "rcid", relationship = "many-to-many") %>%
select(rcid, date, country_code, vote) %>%
filter(!is.na(vote) & !is.na(country_code)) %>%
filter(date >= paste(year_min,'-01-01',sep = ""))
if (un$country_code %>% unique() %in% code %>% sum() <=1){
return("No such country code in the database")
}
else {un_members <- un %>% filter(country_code %in% code) %>%
pivot_wider(names_from = country_code, values_from = vote) %>%
drop_na()
agr_rate <- mean(un_members$country_code[1]==un_members$countrycode[2])
round(agr_rate*100,2)}
}
votes_agreement_calculator(code=c('US','DE'),year_min = 1990)
votes_agreement_calculator <- function(code=c('DE','US'),year_min=1990){
un <- full_join(un_roll_calls, un_votes, by = "rcid", relationship = "many-to-many") %>%
select(rcid, date, country_code, vote) %>%
filter(!is.na(vote) & !is.na(country_code)) %>%
filter(date >= paste(year_min,'-01-01',sep = ""))
if (un$country_code %>% unique() %in% code %>% sum() <=1){
return("No such country code in the database")
}
else {un_members <- un %>% filter(country_code %in% code) %>%
pivot_wider(names_from = country_code, values_from = vote) %>%
drop_na()
agr_rate <- mean(un_members$country_code[1]==un_members$country_code[2])
round(agr_rate*100,2)}
}
votes_agreement_calculator(code=c('US','DE'),year_min = 1990)
votes_agreement_calculator <- function(code=c('DE','US'),year_min=1990){
un <- full_join(un_roll_calls, un_votes, by = "rcid", relationship = "many-to-many") %>%
select(rcid, date, country_code, vote) %>%
filter(!is.na(vote) & !is.na(country_code)) %>%
filter(date >= paste(year_min,'-01-01',sep = ""))
if (un$country_code %>% unique() %in% code %>% sum() <=1){
return("No such country code in the database")
}
else {un_members <- un %>% filter(country_code %in% code) %>%
pivot_wider(names_from = country_code, values_from = vote) %>%
drop_na()
agr_rate <- mean(un_members$code[1]==un_members$code[2])
round(agr_rate*100,2)}
}
votes_agreement_calculator(code=c('US','DE'),year_min = 1990)
votes_agreement_calculator <- function(code=c('DE','US'),year_min=1990){
un <- full_join(un_roll_calls, un_votes, by = "rcid", relationship = "many-to-many") %>%
select(rcid, date, country_code, vote) %>%
filter(!is.na(vote) & !is.na(country_code)) %>%
filter(date >= paste(year_min,'-01-01',sep = ""))
if (un$country_code %>% unique() %in% code %>% sum() <=1){
return("No such country code in the database")
}
else {un_members <- un %>% filter(country_code %in% code) %>%
group_by(rcid) %>%
mutate(row = row_number())
pivot_wider(names_from = row, values_from = vote, names_prefix = 'mem') %>%
drop_na()
agr_rate <- mean(un_members$mem1==un_members$mem2)
round(agr_rate*100,2)}
}
votes_agreement_calculator(code=c('US','DE'),year_min = 1990)
}
}
}
}
}
votes_agreement_calculator <- function(code = c('DE', 'US'), year_min = 1990) {
un <- full_join(un_roll_calls, un_votes, by = "rcid", relationship = "many-to-many") %>%
select(rcid, date, country_code, vote) %>%
filter(!is.na(vote) & !is.na(country_code)) %>%
filter(date >= paste(year_min, '-01-01', sep = ""))
if (sum(un$country_code %>% unique() %in% code) <= 1) {
return("No such country code in the database")
} else {
un_members <- un %>% filter(country_code %in% code) %>%
pivot_wider(names_from = country_code, values_from = vote) %>%
drop_na()
agr_rate <- mean(un_members[[code[1]]] == un_members[[code[2]]])
return(round(agr_rate * 100, 2))
}
}
votes_agreement_calculator(code=c('US','DE'),year_min = 1990)
votes_agreement_calculator(code=c('RU','US'),year_min = 2005)
votes_agreement_calculator(code=c('GB','FR'),year_min = 2000)
votes_agreement_calculator(code=c('RU','US'),year_min = 2000)
#creating function using our previous code
votes_agreement_calculator <- function(code = c('DE', 'US'), year_min = 1990) {
un <- full_join(un_roll_calls, un_votes, by = "rcid", relationship = "many-to-many") %>%
select(rcid, date, country_code, vote) %>%
filter(!is.na(vote) & !is.na(country_code)) %>%
filter(date >= paste(year_min, '-01-01', sep = "")) #using only year as required
if (sum(un$country_code %>% unique() %in% code) <= 1) {
return("No such country code in the database") #it is necessary to check if input contains correct code
} else {
un_members <- un %>% filter(country_code %in% code) %>%
pivot_wider(names_from = country_code, values_from = vote) %>%
drop_na()
agr_rate <- mean(un_members[[code[1]]] == un_members[[code[2]]])
return(round(agr_rate * 100, 2))
}
}
votes_agreement_calculator(code=c('US','DE'),year_min = 1990)
votes_agreement_calculator(code=c('RU','US'),year_min = 2000)
votes_agreement_calculator(code=c('FR','GB'),year_min = 2000)
not_us <- un_votes$country_code %>% na.exclude() %>% unique() %>% .[-which(. =="US")]
us_ally <- not_us %>% map_dbl(~(votes_agreement_calculator(code = c(.x,"US"),year_min = 2000))) %>%
order(decreasing = T)
rlang::last_trace()
us_ally <- not_us %>% map_chr(~(votes_agreement_calculator(code = c(.x,"US"), year_min = 2000))) %>%
order(decreasing = T)
top_ally <- us_ally[c(:3)]
top_ally <- us_ally[c(1:3)]
us_ally <- not_us %>% map_chr(~(votes_agreement_calculator(code = c(.x,"US"), year_min = 2000))) %>%
order(decreasing = T)
View(tailnum_delay_db)
us_ally <- not_us %>% map_dbl(~(votes_agreement_calculator(code = c(.x,"US"), year_min = 2000))) %>%
order(decreasing = T)
us_ally <- not_us %>% map_dbl(~(votes_agreement_calculator(code = c(.x,"US"), year_min = 2000))) %>%
order(decreasing = T)
us_ally <- not_us %>% map_dbl(~votes_agreement_calculator(code = c(.x,"US"), year_min = 2000)) %>%
order(decreasing = T)
us_ally <- not_us %>% map_dbl(~votes_agreement_calculator(code = c(.x,"US"), year_min = 2000)) %>%
order(decreasing = T)
top_ally <- us_ally[c(1:3)]
top_ally
us_ally <- not_us %>% map(~votes_agreement_calculator(code = c(.x,"US"), year_min = 2000)) %>%
order(decreasing = T)
us_ally <- not_us %>% map(~votes_agreement_calculator(code = c(.x,"US"), year_min = 2000))
top_ally <- us_ally[c(1:3)]
top_ally
us_ally <- not_us %>% map_chr(~votes_agreement_calculator(code = c(.x,"US"), year_min = 2000))
top_ally <- us_ally[c(1:3)]
top_ally
us_ally <- not_us %>% map_chr(~votes_agreement_calculator(code = c(.x,"US"), year_min = 2000)) %>%
order(decreasing = T)
us_ally <- not_us %>% map_dbl(~(votes_agreement_calculator(un, .x, "US", 2000)))
not_us <- un_votes$country_code %>% na.exclude() %>% unique() %>% .[-which(. =="US")]
us_ally <- not_us %>% map_dbl(~(votes_agreement_calculator(code = c(.x,"US"), year_min = 2000)))
us_ally
top_ally <- us_ally[c(1:3)]
top_ally
not_us[top_ally]
us_ally <- not_us %>% map_dbl(~(votes_agreement_calculator(code = c(.x,"US"), year_min = 2000))) %>%
order(decreasing = T)
us_ally <- not_us %>% map_dbl(~(votes_agreement_calculator(code = c(.x,"US"), year_min = 2000)))
us_ally <- order(decreasing = T)
us_ally[c(1:3)]
not_us[top_ally]
us_ally
us_ally
us_ally <- not_us %>% map_dbl(~(votes_agreement_calculator(code = c(.x,"US"), year_min = 2000)))
us_ally
us_ally <- not_us %>% map_dbl(~(votes_agreement_calculator(code = c(.x,"US"), year_min = 2000)))
top_allies <- not_us %>% map_dbl(~(votes_agreement_calculator(.x, "US", "2000")))
top_allies <- not_us %>% map_dbl(~(votes_agreement_calculator((code = c(.x,"US"),year_min = 2000)))
top_allies <- not_us %>% map_dbl(~(votes_agreement_calculator((code = c(.x, "US"), year_min = 2000)))
top_allies <- not_us %>% map_dbl(~(votes_agreement_calculator(code = c(.x, "US"), year_min = 2000)))
top_allies
top_allies <- not_us %>% map_dbl(~(votes_agreement_calculator(code = c(.x, "US"), year_min = 2000)))
top_allies <- not_us %>%
discard(~ !is.numeric(votes_agreement_calculator(code = c(.x, "US"), year_min = 2000))) %>%
map_dbl(~(votes_agreement_calculator(code = c(.x, "US"), year_min = 2000)))
top_allies
top_allies <- not_us %>%
discard(~ !is.numeric(votes_agreement_calculator(code = c(.x, "US"), year_min = 2000))) %>%
map_dbl(~(votes_agreement_calculator(code = c(.x, "US"), year_min = 2000))) %>%
order(decreasing = TRUE)
top_allies
top_three_allies <- top_allies[c(1:3)]
not_us[top_three_allies]
votes_agreement_calculator(code=c('IL','US'),year_min = 2000)
votes_agreement_calculator(code=c('PK','US'),year_min = 2000)
votes_agreement_calculator(code=c('LT','US'),year_min = 2000)
votes_agreement_calculator(code=c('MK','US'),year_min = 2000)
votes_agreement_calculator(code=c('FM','US'),year_min = 2000)
votes_agreement_calculator(code=c('PW','US'),year_min = 2000)
top_allies <- not_us %>%
map_dbl(~(votes_agreement_calculator(code = c(.x, "US"), year_min = 2000))) %>%
order(decreasing = TRUE)
not_us
un_votes
un
not_us <- un$country_code %>% na.exclude() %>% unique() %>% .[-which(. =="US")]
top_allies <- not_us %>%
map_dbl(~(votes_agreement_calculator(code = c(.x, "US"), year_min = 2000))) %>%
order(decreasing = TRUE)
not_us <- un$country_code %>% na.exclude() %>% unique() %>% .[-which(. =="US")]
top_allies <- not_us %>%
keep(~ is.numeric(votes_agreement_calculator(code = c(.x, "US"), year_min = 2000)))
map_dbl(~(votes_agreement_calculator(code = c(.x, "US"), year_min = 2000))) %>%
order(decreasing = TRUE)
rlang::last_trace()
top_allies <- not_us %>%
map_dbl(~(votes_agreement_calculator(code = c(.x, "US"), year_min = 2000))) %>%
order(decreasing = TRUE)
top_allies <- not_us %>%
map(~(votes_agreement_calculator(code = c(.x, "US"), year_min = 2000))) %>%
order(decreasing = TRUE)
top_allies <- not_us %>%
map(~(votes_agreement_calculator(code = c(.x, "US"), year_min = 2000)))
top_allies
votes_agreement_calculator <- function(code = c('DE', 'US'), year_min = 1990) {
un <- full_join(un_roll_calls, un_votes, by = "rcid", relationship = "many-to-many") %>%
select(rcid, date, country_code, vote) %>%
filter(!is.na(vote) & !is.na(country_code)) %>%
filter(date >= paste(year_min, '-01-01', sep = ""))
if (sum(un$country_code %>% unique() %in% code) <= 1) {
return(0)
} else {
un_members <- un %>% filter(country_code %in% code) %>%
pivot_wider(names_from = country_code, values_from = vote) %>%
drop_na()
agr_rate <- mean(un_members[[code[1]]] == un_members[[code[2]]])
return(round(agr_rate * 100, 2))
}
}
top_allies <- not_us %>%
map_dbl(~(votes_agreement_calculator(code = c(.x,"US"),year_min = 2000))) %>%
order(decreasing = T)
top_allies
top_three_allies <- top_allies[c(1:3)]
not_us[top_three_allies]
library(countrycode)
countrycode(not_us[top_three_allies])
countrycode(not_us[top_three_allies], origin = 'iso3c')
countrycode(not_us[top_three_allies], origin = 'iso3c', destination = 'country.name')
help(countrycode)
countrycode(not_us[top_three_allies], origin = 'iso2c', destination = 'country.name')
#creating function using our previous code
votes_agreement_calculator <- function(code = c('DE', 'US'), year_min = 1990) {
un <- full_join(un_roll_calls, un_votes, by = "rcid", relationship = "many-to-many") %>%
select(rcid, date, country_code, vote) %>%
filter(!is.na(vote) & !is.na(country_code)) %>%
filter(date >= paste(year_min, '-01-01', sep = "")) #using only year as required
if (sum(un$country_code %>% unique() %in% code) <= 1) {
return(0) #it is necessary to check if input contains correct code
} else {
un_members <- un %>% filter(country_code %in% code) %>%
pivot_wider(names_from = country_code, values_from = vote) %>%
drop_na()
agr_rate <- mean(un_members[[code[1]]] == un_members[[code[2]]])
return(round(agr_rate * 100, 2))
}
}
votes_agreement_calculator(code=c('US','DE'),year_min = 1990)
library(countrycode)
cat("There are the following countries agreed with US the most from the year 2000", countrycode(not_us[top_three_allies], origin = 'iso2c', destination = 'country.name'))
cat("There are the following countries agreed with US the most from the year 2000:", countrycode(not_us[top_three_allies], origin = 'iso2c', destination = 'country.name'))
if (player == ran_color) {
cat("Congratulations! You won")
} else {
cat("Sorry, you lost")
}
game <- function() {
ran_color <- sample(colors, 1)
cat("Hello! Choose the color (red, yellow, green, or blue): ")
player <- tolower(readline())
if (player == ran_color) {
cat("Congratulations! You won")
} else {
cat("Sorry, you lost")
}
game()
if (player == colors()) {
cat("Congratulations! You won")
} else {
cat("Sorry, you lost")
}
game <- function() {
cat("Hello! Choose the color (red, yellow, green, or blue): ")
player <- tolower(readline())
if (player == colors()) {
cat("Congratulations! You won")
} else {
cat("Sorry, you lost")
}
game()
game()
game <- function() {
colors <- sample(c("red", "yellow", "green", "blue"), size = 1)
cat("Hello! Choose the color (red, yellow, green, or blue): ")
player <- tolower(readline())
if (player == colors()) {
cat("Congratulations! You won")
} else {
cat("Sorry, you lost")
}
}
game()
game <- function() {
colors <- sample(c("red", "yellow", "green", "blue"), size = 1)
cat("Hello! Choose the color (red, yellow, green, or blue): ")
player <- tolower(readline())
if (player == colors()) {
cat("Congratulations! You won")
} else {
cat("Sorry, you lost")
}
}
game()
game <- function() {
colors <- sample(c("red", "yellow", "green", "blue"), size = 1)
cat("Hello! Choose the color (red, yellow, green, or blue): ")
player <- tolower(readline())
if (player == colors()) {
cat("Congratulations! You won")
} else {
cat("Sorry, you lost")
}
}
game()
game <- function() {
cat("Hello! Choose the color (red, yellow, green, or blue): ")
player <- tolower(readline())
if (player == colors {
if (player == colors) {
cat("Congratulations! You won")
} else {
cat("Sorry, you lost")
}
player <- tolower(readline())
